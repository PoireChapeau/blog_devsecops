# docker-compose.yml optimisé
version: '3.8'

services:
  # Base de données PostgreSQL
  database:
    image: postgres:15-alpine
    container_name: ${COMPOSE_PROJECT_NAME:-blog}-database
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - blog-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    # Sécurité : utilisateur non-root
    user: postgres
    # Limites de ressources
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Backend Node.js
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: ${COMPOSE_PROJECT_NAME:-blog}-backend
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${DB_HOST}:${DB_PORT}/${POSTGRES_DB}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_NAME: ${POSTGRES_DB}
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      PORT: ${BACKEND_PORT}
      NODE_ENV: ${NODE_ENV}
    ports:
      - "${BACKEND_PORT:-3001}:${BACKEND_PORT:-3001}"
    depends_on:
      database:
        condition: service_healthy
    networks:
      - blog-network
    restart: unless-stopped
    # Sécurité : utilisateur non-root
    user: node
    # Limites de ressources
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.3'
    # Healthcheck pour le backend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:${BACKEND_PORT:-3001}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend React + Nginx
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
      args:
        REACT_APP_API_URL: ${REACT_APP_API_URL}
    container_name: ${COMPOSE_PROJECT_NAME:-blog}-frontend
    ports:
      - "${FRONTEND_PORT:-80}:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - blog-network
    restart: unless-stopped
    # Limites de ressources
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.2'
    # Healthcheck pour le frontend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

# Volumes pour persister les données
volumes:
  postgres_data:
    driver: local

# Réseau pour que les conteneurs communiquent
networks:
  blog-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16